@import './config.scss';
@import '../common/var.scss';
@import './function.scss';

/* Button
--------------- */
@mixin btn-size($padding-vertical, $padding-horizontal, $font-size, $border-radius) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;

  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}

@mixin btn-variant($color, $background-color, $border-color) {
  color: $color;
  background-color: $background-color;
  border-color: $border-color;

  &:hover,
  &:focus {
    background-color: scale-color($background-color, $lightness: $btn-hover-tint-percent);
    border-color: scale-color($border-color, $lightness: $btn-hover-tint-percent);
    color: $color;
  }

  &:active {
    background-color: scale-color($background-color, $lightness: $btn-active-shade-percent);
    color: $color;
    border-color: scale-color($border-color, $lightness: $btn-active-shade-percent);
    outline: none;
  }

  &.is-disabled {

    &,
    &:hover,
    &:focus {
      cursor: not-allowed;
      color: $color;
      background-color: scale-color($background-color, $lightness: $btn-disabled-tint-percent);
      border-color: scale-color($border-color, $lightness: $btn-disabled-tint-percent);
    }

  }

}

/* Scrollbar
 -------------------------- */
@mixin scroll-bar {
  $--scrollbar-thumb-background: #b4bccc;
  $--scrollbar-track-background: #fff;

  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;

    &:horizontal {
      height: 6px;
    }

    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $--scrollbar-thumb-background;
    }

    &-corner {
      background: $--scrollbar-track-background;
    }

    &-track {
      background: $--scrollbar-track-background;

      &-piece {
        background: $--scrollbar-track-background;
        width: 6px;
      }
    }
  }
}

/* BEM
------------------------------ */
@mixin b($block) {
  $B: $namespace + '-'+ $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $selector: &;

  @if containsModifier($selector) {
    $block: getBlock($selector);

    @at-root {
      #{$selector} {
        #{$block+$elementSeparator+$element} {
          @content;
        }
      }
    }
  }

  @else {
    @at-root {
      #{$selector+$elementSeparator+$element} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;

  @at-root #{$selector+$modifierSeparator+$modifier} {
    @content;
  }
}

@mixin when($state) {
  @at-root #{&+'.is-'+$state} {
    @content;
  }
}